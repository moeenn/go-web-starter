package components

type RegisterFormFields struct {
	Email           string
	Password        string
	ConfirmPassword string
}

type RegisterFormProps struct {
	Errors  *RegisterFormFields
	Values  RegisterFormFields
	Message *Message
}

templ RegisterForm(props RegisterFormProps) {
	<form hx-post="/auth/register">
		<h2 class="text-3xl mb-6">Create Account</h2>
		if props.Message != nil {
			@MessageBox(*props.Message)
		}
		<fieldset class="mb-6">
			@Label("email", "Email")
			<input
				name="email"
				type="email"
				required
				class="text-sm px-3 py-2 border border-zinc-300 rounded w-full outline-cyan-600"
				value={ props.Values.Email }
			/>
			if props.Errors != nil && props.Errors.Email != "" {
				@InputError(props.Errors.Email)
			}
		</fieldset>
		<fieldset class="mb-6">
			@Label("password", "Password")
			<input
				type="password"
				name="password"
				required
				minlength="8"
				class="text-sm px-3 py-2 border border-zinc-300 rounded w-full outline-cyan-600"
			/>
			if props.Errors != nil && props.Errors.Password != "" {
				@InputError(props.Errors.Password)
			}
		</fieldset>
		<fieldset class="mb-6">
			@Label("password", "Confirm password")
			<input
				type="password"
				name="confirmPassword"
				required
				minlength="8"
				class="text-sm px-3 py-2 border border-zinc-300 rounded w-full outline-cyan-600"
			/>
			if props.Errors != nil && props.Errors.ConfirmPassword != "" {
				@InputError(props.Errors.ConfirmPassword)
			}
		</fieldset>
		<fieldset class="mb-6">
			<a
				href="/auth/login"
				class="text-cyan-600 text-sm"
			>
				Login instead
			</a>
		</fieldset>
		<input
			type="submit"
			value="Register"
			class="w-full bg-cyan-600 hover:bg-cyan-700 transition-colors text-white text-sm px-3 py-2 rounded cursor-pointer"
		/>
	</form>
}
